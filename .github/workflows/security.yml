name: 🔒 Security Checks

on:
  schedule:
    # Ejecutar análisis de seguridad todos los días a las 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Permitir ejecución manual

jobs:
  dependency-check:
    name: 🔍 Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🔍 Audit dependencies
      run: npm audit --audit-level=moderate
      
    - name: 🔒 Run Snyk vulnerability scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --file=package.json
        
    - name: 📊 Upload Snyk results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: snyk.sarif

  secrets-scan:
    name: 🔐 Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Necesario para escanear todo el historial
        
    - name: 🔐 Run TruffleHog secrets scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  license-check:
    name: 📄 License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 📄 Check licenses
      run: |
        npx license-checker --summary --excludePrivatePackages --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD'

  docker-security:
    name: 🐳 Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Build Docker image
      run: |
        cat > Dockerfile << 'EOF'
        FROM node:18-alpine
        WORKDIR /app
        COPY package*.json ./
        RUN npm ci --only=production
        COPY . .
        RUN npm run build
        EXPOSE 3000
        CMD ["npm", "start"]
        EOF
        docker build -t wellness-app .
        
    - name: 🔒 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'wellness-app'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📊 Upload Trivy results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  sast-analysis:
    name: 🔍 Static Application Security Testing
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      contents: read
      security-events: write
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        queries: security-and-quality
        
    - name: 🏗️ Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  security-headers:
    name: 🛡️ Security Headers Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 🛡️ Check security headers
      run: |
        # Verificar headers de seguridad en producción
        if curl -s -I https://wellness-supplements.com | grep -q "X-Frame-Options: DENY"; then
          echo "✅ X-Frame-Options header found"
        else
          echo "❌ X-Frame-Options header missing"
          exit 1
        fi
        
        if curl -s -I https://wellness-supplements.com | grep -q "X-XSS-Protection"; then
          echo "✅ X-XSS-Protection header found"
        else
          echo "❌ X-XSS-Protection header missing"
          exit 1
        fi

  ssl-check:
    name: 🔐 SSL/TLS Configuration Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 🔐 Check SSL configuration
      run: |
        # Verificar configuración SSL
        echo | openssl s_client -connect wellness-supplements.com:443 -servername wellness-supplements.com 2>/dev/null | openssl x509 -noout -dates
        
        # Verificar que redirige HTTP a HTTPS
        if curl -s -I http://wellness-supplements.com | grep -q "Location: https://"; then
          echo "✅ HTTP to HTTPS redirect working"
        else
          echo "❌ HTTP to HTTPS redirect not working"
          exit 1
        fi

  penetration-testing:
    name: 🎯 Automated Penetration Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 🎯 Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'https://wellness-supplements.com'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

  security-scorecard:
    name: 📊 Security Scorecard
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    permissions:
      security-events: write
      id-token: write
      actions: read
      contents: read
      
    steps:
    - name: 📊 Run analysis
      uses: ossf/scorecard-action@v2.3.1
      with:
        results_file: results.sarif
        results_format: sarif
        publish_results: true
        
    - name: 📊 Upload results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: results.sarif

  # Notificaciones de seguridad
  security-notifications:
    name: 📢 Security Notifications
    runs-on: ubuntu-latest
    needs: [dependency-check, secrets-scan, sast-analysis]
    if: failure()
    
    steps:
    - name: 📢 Notify security team
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#security-alerts'
        text: |
          🚨 Security scan failed for Wellness Supplements Platform
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref }}
          Workflow: ${{ github.workflow }}
          Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}

  # Crear issues automáticamente para vulnerabilidades críticas
  create-security-issues:
    name: 📝 Create Security Issues
    runs-on: ubuntu-latest
    needs: [dependency-check, secrets-scan, sast-analysis]
    if: failure()
    
    permissions:
      issues: write
      
    steps:
    - name: 📝 Create security issue
      uses: actions/github-script@v6
      with:
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 Security Vulnerability Detected',
            body: `
            ## Security Alert
            
            A security vulnerability has been detected in the repository.
            
            **Workflow:** ${context.workflow}
            **Run ID:** ${context.runId}
            **Branch:** ${context.ref}
            **Commit:** ${context.sha}
            
            Please review the failed security checks and take appropriate action.
            
            **Priority:** High
            **Labels:** security, vulnerability, urgent
            
            ---
            *This issue was created automatically by the security workflow.*
            `,
            labels: ['security', 'vulnerability', 'urgent', 'bug']
          });
          
          console.log(`Created issue #${issue.data.number}`);